
Final Project 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000202  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000256  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009f3  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000696  00000000  00000000  00000d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000595  00000000  00000000  00001405  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000012c  00000000  00000000  0000199c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000400  00000000  00000000  00001ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000425  00000000  00000000  00001ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000022ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  64:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPin_Direction>:
#include "DIO.h"
/*Function Implementations*/
/*Functions for PINS*/
void DIO_SetPin_Direction(Uint8t port, Uint8t pin, Uint8t direction)/*Define Direction for pin(Ip/Op)*/
{
	switch(direction)
  6c:	44 23       	and	r20, r20
  6e:	19 f0       	breq	.+6      	; 0x76 <DIO_SetPin_Direction+0xa>
  70:	41 30       	cpi	r20, 0x01	; 1
  72:	c9 f1       	breq	.+114    	; 0xe6 <DIO_SetPin_Direction+0x7a>
  74:	08 95       	ret
	{
		case DIO_PIN_INPUT:
		switch(port)
  76:	81 30       	cpi	r24, 0x01	; 1
  78:	91 f0       	breq	.+36     	; 0x9e <DIO_SetPin_Direction+0x32>
  7a:	28 f0       	brcs	.+10     	; 0x86 <DIO_SetPin_Direction+0x1a>
  7c:	82 30       	cpi	r24, 0x02	; 2
  7e:	d9 f0       	breq	.+54     	; 0xb6 <DIO_SetPin_Direction+0x4a>
  80:	83 30       	cpi	r24, 0x03	; 3
  82:	29 f1       	breq	.+74     	; 0xce <DIO_SetPin_Direction+0x62>
  84:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
  86:	2a b3       	in	r18, 0x1a	; 26
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	02 c0       	rjmp	.+4      	; 0x92 <DIO_SetPin_Direction+0x26>
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	6a 95       	dec	r22
  94:	e2 f7       	brpl	.-8      	; 0x8e <DIO_SetPin_Direction+0x22>
  96:	80 95       	com	r24
  98:	82 23       	and	r24, r18
  9a:	8a bb       	out	0x1a, r24	; 26
			break;
  9c:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
  9e:	27 b3       	in	r18, 0x17	; 23
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <DIO_SetPin_Direction+0x3e>
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	6a 95       	dec	r22
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <DIO_SetPin_Direction+0x3a>
  ae:	80 95       	com	r24
  b0:	82 23       	and	r24, r18
  b2:	87 bb       	out	0x17, r24	; 23
			break;
  b4:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
  b6:	24 b3       	in	r18, 0x14	; 20
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_SetPin_Direction+0x56>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_SetPin_Direction+0x52>
  c6:	80 95       	com	r24
  c8:	82 23       	and	r24, r18
  ca:	84 bb       	out	0x14, r24	; 20
			break;
  cc:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
  ce:	21 b3       	in	r18, 0x11	; 17
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_SetPin_Direction+0x6e>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_SetPin_Direction+0x6a>
  de:	80 95       	com	r24
  e0:	82 23       	and	r24, r18
  e2:	81 bb       	out	0x11, r24	; 17
			break;
  e4:	08 95       	ret
		}
		break;
		case DIO_PIN_OUTPUT:
		switch(port)
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	89 f0       	breq	.+34     	; 0x10c <DIO_SetPin_Direction+0xa0>
  ea:	28 f0       	brcs	.+10     	; 0xf6 <DIO_SetPin_Direction+0x8a>
  ec:	82 30       	cpi	r24, 0x02	; 2
  ee:	c9 f0       	breq	.+50     	; 0x122 <DIO_SetPin_Direction+0xb6>
  f0:	83 30       	cpi	r24, 0x03	; 3
  f2:	11 f1       	breq	.+68     	; 0x138 <DIO_SetPin_Direction+0xcc>
  f4:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
  f6:	2a b3       	in	r18, 0x1a	; 26
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_SetPin_Direction+0x96>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_SetPin_Direction+0x92>
 106:	82 2b       	or	r24, r18
 108:	8a bb       	out	0x1a, r24	; 26
			break;
 10a:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
 10c:	27 b3       	in	r18, 0x17	; 23
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_SetPin_Direction+0xac>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_SetPin_Direction+0xa8>
 11c:	82 2b       	or	r24, r18
 11e:	87 bb       	out	0x17, r24	; 23
			break;
 120:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
 122:	24 b3       	in	r18, 0x14	; 20
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_SetPin_Direction+0xc2>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_SetPin_Direction+0xbe>
 132:	82 2b       	or	r24, r18
 134:	84 bb       	out	0x14, r24	; 20
			break;
 136:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
 138:	21 b3       	in	r18, 0x11	; 17
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_SetPin_Direction+0xd8>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_SetPin_Direction+0xd4>
 148:	82 2b       	or	r24, r18
 14a:	81 bb       	out	0x11, r24	; 17
 14c:	08 95       	ret

0000014e <main>:
#include "util/delay.h"

#define F_CPU 16000000UL

int main(void)
{
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	1f 92       	push	r1
 154:	cd b7       	in	r28, 0x3d	; 61
 156:	de b7       	in	r29, 0x3e	; 62
	SPI_INIT();
 158:	0e 94 e6 00 	call	0x1cc	; 0x1cc <SPI_INIT>

	DIO_SetPin_Direction(DIO_PORTC,DIO_PIN0,DIO_PIN_OUTPUT);
 15c:	41 e0       	ldi	r20, 0x01	; 1
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
	DIO_SetPin_Direction(DIO_PORTC,DIO_PIN1,DIO_PIN_OUTPUT);
 166:	41 e0       	ldi	r20, 0x01	; 1
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
	DIO_SetPin_Direction(DIO_PORTC,DIO_PIN2,DIO_PIN_OUTPUT);
 170:	41 e0       	ldi	r20, 0x01	; 1
 172:	62 e0       	ldi	r22, 0x02	; 2
 174:	82 e0       	ldi	r24, 0x02	; 2
 176:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>

	Uint8t Data_in;

	while(1)
	{
		SPI_RECEIVE(&Data_in);
 17a:	ce 01       	movw	r24, r28
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <SPI_RECEIVE>
		
		if (Data_in =='1')
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	81 33       	cpi	r24, 0x31	; 49
 186:	51 f4       	brne	.+20     	; 0x19c <main+0x4e>
		{
			CLR_BIT(PORTC,DIO_PIN2);
 188:	85 b3       	in	r24, 0x15	; 21
 18a:	8b 7f       	andi	r24, 0xFB	; 251
 18c:	85 bb       	out	0x15, r24	; 21
			CLR_BIT(PORTC,DIO_PIN1);
 18e:	85 b3       	in	r24, 0x15	; 21
 190:	8d 7f       	andi	r24, 0xFD	; 253
 192:	85 bb       	out	0x15, r24	; 21
			SET_BIT(PORTC,DIO_PIN0);
 194:	85 b3       	in	r24, 0x15	; 21
 196:	81 60       	ori	r24, 0x01	; 1
 198:	85 bb       	out	0x15, r24	; 21
 19a:	ef cf       	rjmp	.-34     	; 0x17a <main+0x2c>

		}
		else if(Data_in =='2')
 19c:	82 33       	cpi	r24, 0x32	; 50
 19e:	51 f4       	brne	.+20     	; 0x1b4 <main+0x66>
		{
			CLR_BIT(PORTC,DIO_PIN0);
 1a0:	85 b3       	in	r24, 0x15	; 21
 1a2:	8e 7f       	andi	r24, 0xFE	; 254
 1a4:	85 bb       	out	0x15, r24	; 21
			CLR_BIT(PORTC,DIO_PIN2);
 1a6:	85 b3       	in	r24, 0x15	; 21
 1a8:	8b 7f       	andi	r24, 0xFB	; 251
 1aa:	85 bb       	out	0x15, r24	; 21
			SET_BIT(PORTC,DIO_PIN1);
 1ac:	85 b3       	in	r24, 0x15	; 21
 1ae:	82 60       	ori	r24, 0x02	; 2
 1b0:	85 bb       	out	0x15, r24	; 21
 1b2:	e3 cf       	rjmp	.-58     	; 0x17a <main+0x2c>
		}
		else if(Data_in =='3')
 1b4:	83 33       	cpi	r24, 0x33	; 51
 1b6:	09 f7       	brne	.-62     	; 0x17a <main+0x2c>
		{
			CLR_BIT(PORTC,DIO_PIN0);
 1b8:	85 b3       	in	r24, 0x15	; 21
 1ba:	8e 7f       	andi	r24, 0xFE	; 254
 1bc:	85 bb       	out	0x15, r24	; 21
			CLR_BIT(PORTC,DIO_PIN1);
 1be:	85 b3       	in	r24, 0x15	; 21
 1c0:	8d 7f       	andi	r24, 0xFD	; 253
 1c2:	85 bb       	out	0x15, r24	; 21
			SET_BIT(PORTC,DIO_PIN2);
 1c4:	85 b3       	in	r24, 0x15	; 21
 1c6:	84 60       	ori	r24, 0x04	; 4
 1c8:	85 bb       	out	0x15, r24	; 21
 1ca:	d7 cf       	rjmp	.-82     	; 0x17a <main+0x2c>

000001cc <SPI_INIT>:
}
void SPI_TRANSMIT(Uint8t data)
{
	SPDR = data;
	while (GET_BIT(SPSR, SPIF) != 1);
}
 1cc:	87 b3       	in	r24, 0x17	; 23
 1ce:	8f 7d       	andi	r24, 0xDF	; 223
 1d0:	87 bb       	out	0x17, r24	; 23
 1d2:	87 b3       	in	r24, 0x17	; 23
 1d4:	80 64       	ori	r24, 0x40	; 64
 1d6:	87 bb       	out	0x17, r24	; 23
 1d8:	87 b3       	in	r24, 0x17	; 23
 1da:	8f 77       	andi	r24, 0x7F	; 127
 1dc:	87 bb       	out	0x17, r24	; 23
 1de:	87 b3       	in	r24, 0x17	; 23
 1e0:	8f 7e       	andi	r24, 0xEF	; 239
 1e2:	87 bb       	out	0x17, r24	; 23
 1e4:	8d b1       	in	r24, 0x0d	; 13
 1e6:	8f 7e       	andi	r24, 0xEF	; 239
 1e8:	8d b9       	out	0x0d, r24	; 13
 1ea:	8d b1       	in	r24, 0x0d	; 13
 1ec:	80 64       	ori	r24, 0x40	; 64
 1ee:	8d b9       	out	0x0d, r24	; 13
 1f0:	08 95       	ret

000001f2 <SPI_RECEIVE>:
void SPI_RECEIVE(Uint8t* data)
{
	while (GET_BIT(SPSR, SPIF) != 1);
 1f2:	77 9b       	sbis	0x0e, 7	; 14
 1f4:	fe cf       	rjmp	.-4      	; 0x1f2 <SPI_RECEIVE>
	*data = SPDR;
 1f6:	2f b1       	in	r18, 0x0f	; 15
 1f8:	fc 01       	movw	r30, r24
 1fa:	20 83       	st	Z, r18
 1fc:	08 95       	ret

000001fe <_exit>:
 1fe:	f8 94       	cli

00000200 <__stop_program>:
 200:	ff cf       	rjmp	.-2      	; 0x200 <__stop_program>
